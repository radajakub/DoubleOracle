var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DoubleOracle","category":"page"},{"location":"#DoubleOracle","page":"Home","title":"DoubleOracle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DoubleOracle.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DoubleOracle]","category":"page"},{"location":"#DoubleOracle.ActionSet","page":"Home","title":"DoubleOracle.ActionSet","text":"ActionSet\n\nSet of actions of a single player. Store names and assign ids for internal representation.\n\n\n\n\n\n","category":"type"},{"location":"#DoubleOracle.ActionSet-Tuple{Player, Vector{String}}","page":"Home","title":"DoubleOracle.ActionSet","text":"ActionSet(player, actionnames)\n\nConstruct ActionSet for player containing action with names as in actionnames.\n\nExamples\n\njulia> ActionSet(Player(1), [\"A\", \"B\", \"C\"])\nActions of Player 1: [1] A | [2] B | [3] C |\n\njulia> ActionSet(Player(2), [\"f\", \"e\", \"d\"])\nActions of Player 2: [1] f | [2] e | [3] d |\n\n\n\n\n\n","category":"method"},{"location":"#DoubleOracle.Game","page":"Home","title":"DoubleOracle.Game","text":"Game\n\nAbstract type uniting all types of games in Game Theory.\n\n\n\n\n\n","category":"type"},{"location":"#DoubleOracle.NormalFormGame","page":"Home","title":"DoubleOracle.NormalFormGame","text":"NormalFormGame{T}\n\nModel for a two-player zero-sum game in Normal Form. Here, player 1 tries to maximise the outcome of type T, player 2 minimises it.\n\nFields\n\nname: Name of the NF game\nN: Players of the game\nA: Available actions of each player\nU: Game matrix containing the outcomes for each joint action profile\n\n\n\n\n\n","category":"type"},{"location":"#DoubleOracle.Player","page":"Home","title":"DoubleOracle.Player","text":"Player\n\nRepresent a Player with an integer id in a Game\n\nExamples\n\njulia> Player(1)\nPlayer 1\n\njulia> Player(2)\nPlayer 2\n\n\n\n\n\n","category":"type"},{"location":"#Base.getindex-Tuple{ActionSet, Integer}","page":"Home","title":"Base.getindex","text":"getindex(A, id::Integer)\n\nRetrieve name of action with assigned id.\n\nExamples\n\njulia> A = ActionSet(Player(1), [\"A\", \"B\", \"C\", \"D\"])\nActions of Player 1: [1] A | [2] B | [3] C | [4] D |\n\njulia> A[3]\n\"C\"\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{ActionSet, String}","page":"Home","title":"Base.getindex","text":"getindex(A, name::String)\n\nRetrieve id of action named name.\n\nExamples\n\njulia> A = ActionSet(Player(1), [\"A\", \"B\", \"C\", \"D\"])\nActions of Player 1: [1] A | [2] B | [3] C | [4] D |\n\njulia> A[\"B\"]\n2\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{Union{Tuple{Vararg{T}}, AbstractVector{<:T}} where T, Player}","page":"Home","title":"Base.getindex","text":"getindex(container, player)\n\nGet the element on index of a player inside the container. The container has to be either Vector or Tuple The index corresponds to id of the player.\n\nExamples\n\njulia> names = (\"John\", \"Thomas\", \"Agatha\")\n(\"John\", \"Thomas\", \"Agatha\")\njulia> names[Player(3)]\n\"Agatha\"\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate","page":"Home","title":"Base.iterate","text":"iterate(A)\n\nGo through ids of all actions in fixed order.\n\nExamples\n\njulia> A = ActionSet(Player(1), [\"A\", \"B\", \"C\", \"D\"])\nActions of Player 1: [1] A | [2] B | [3] C | [4] D |\n\njulia> collect(A)\n4-element Vector{Any}:\n 1\n 2\n 3\n 4\n\n\n\n\n\n","category":"function"},{"location":"#Base.length-Tuple{ActionSet}","page":"Home","title":"Base.length","text":"length(A)\n\nReturn number of actions in A.\n\nExamples\n\njulia> A = ActionSet(Player(1), [\"A\", \"B\", \"C\", \"D\"])\nActions of Player 1: [1] A | [2] B | [3] C | [4] D |\n\njulia> length(A)\n4\n\n\n\n\n\n","category":"method"},{"location":"#DoubleOracle.createplayers-Tuple{Integer}","page":"Home","title":"DoubleOracle.createplayers","text":"createplayers(n)\n\nCreate a vector of n Players with ids i  1n\n\nExamples\n\njulia> createplayers(3)\n3-element Vector{Player}:\n Player 1\n Player 2\n Player 3\n\n\n\n\n\n","category":"method"},{"location":"#DoubleOracle.load-Tuple{String, Type{NormalFormGame}}","page":"Home","title":"DoubleOracle.load","text":"load(filepath, type)\n\nLoad and return a game of type (i.e. NormalFormGame, ...) from file located in the filesystem at filepath. The extension of the filepath must correspond to the game type (e.g. NormalFormGame - nfg).\n\nEXample\n\njulia> nf = load(\"./data/nf_games/mathing_pennies.nfg, NormalFormGame)\n\n\n\n\n\n","category":"method"}]
}
